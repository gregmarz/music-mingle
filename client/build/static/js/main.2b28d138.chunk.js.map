{"version":3,"sources":["components/List/index.js","pages/Home.js","utils/mutations.js","utils/auth.js","pages/Login.js","pages/Signup.js","pages/Error.js","components/Nav/index.js","App.js","serviceWorker.js","index.js"],"names":["List","Home","LOGIN","gql","ADD_USER","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","Login","props","useState","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","variables","mutationResponse","data","Auth","console","log","handleChange","target","name","value","to","onSubmit","htmlFor","placeholder","type","id","onChange","Signup","addUser","userName","Error","Nav","role","loggedIn","href","onClick","logout","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","path","element","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"gQAUeA,I,IAAAA,EARf,WACE,OACE,8BACE,+CAGL,ECGcC,EARF,WACX,OACE,8BACE,cAAC,EAAD,KAGL,E,wDCPYC,EAAQC,YAAH,mMAWLC,EAAWD,YAAH,gP,iCC+BN,M,0FAzCb,WACE,OAAOE,IAAOC,KAAKC,WACpB,G,sBAED,WAEE,IAAMC,EAAQF,KAAKC,WACnB,QAASC,IAAUF,KAAKG,eAAeD,EACxC,G,4BAED,SAAeA,GACb,IAEE,OADgBH,IAAOG,GACXE,IAAMC,KAAKC,MAAQ,GAKhC,CAFC,MAAOC,GACP,OAAO,CACR,CACF,G,sBAED,WAEE,OAAOC,aAAaC,QAAQ,WAC7B,G,mBAED,SAAMC,GAEJF,aAAaG,QAAQ,WAAYD,GAEjCE,OAAOC,SAASC,OAAO,IACxB,G,oBAED,WAEEN,aAAaO,WAAW,YAExBH,OAAOC,SAASC,OAAO,IACxB,K,MC6BYE,MAhEf,SAAeC,GACb,MAAkCC,mBAAS,CAAEC,MAAO,GAAIC,SAAU,KAAlE,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA2BC,YAAY3B,GAAvC,mBAAO4B,EAAP,KAAgBC,EAAhB,KAAgBA,MAEVC,EAAgB,iDAAG,WAAOC,GAAP,0FACvBA,EAAMC,iBADiB,kBAGUJ,EAAM,CACnCK,UAAW,CAAEV,MAAOE,EAAUF,MAAOC,SAAUC,EAAUD,YAJtC,OAGfU,EAHe,OAMf5B,EAAQ4B,EAAiBC,KAAKP,MAAMtB,MAC1C8B,EAAKR,MAAMtB,GAPU,gDASrB+B,QAAQC,IAAR,MATqB,yDAAH,sDAahBC,EAAe,SAACR,GACpB,MAAwBA,EAAMS,OAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACdhB,EAAa,2BACRD,GADO,kBAETgB,EAAOC,IAEX,EAED,OACE,gCACE,cAAC,IAAD,CAAMC,GAAG,UAAT,0BAEA,uCACA,uBAAMC,SAAUd,EAAhB,UACE,gCACE,uBAAOe,QAAQ,QAAf,4BACA,uBACEC,YAAY,qBACZL,KAAK,QACLM,KAAK,QACLC,GAAG,QACHC,SAAUV,OAGd,gCACE,uBAAOM,QAAQ,MAAf,uBACA,uBACEC,YAAY,SACZL,KAAK,WACLM,KAAK,WACLC,GAAG,MACHC,SAAUV,OAGbV,EACC,8BACE,yEAEA,KACJ,8BACE,wBAAQkB,KAAK,SAAb,2BAKT,ECOcG,MArEf,SAAgB7B,GACd,MAAkCC,mBAAS,CAAEC,MAAO,GAAIC,SAAU,KAAlE,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkBC,YAAYzB,GAAvBiD,EAAP,oBAEMrB,EAAgB,iDAAG,WAAOC,GAAP,0FACvBA,EAAMC,iBADiB,SAEQmB,EAAQ,CACrClB,UAAW,CACTV,MAAOE,EAAUF,MACjBC,SAAUC,EAAUD,SACpB4B,SAAU3B,EAAU2B,YAND,OAEjBlB,EAFiB,OASjB5B,EAAQ4B,EAAiBC,KAAKgB,QAAQ7C,MAC5C8B,EAAKR,MAAMtB,GAVY,2CAAH,sDAahBiC,EAAe,SAACR,GACpB,MAAwBA,EAAMS,OAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACdhB,EAAa,2BACRD,GADO,kBAETgB,EAAOC,IAEX,EAED,OACE,gCACE,cAAC,IAAD,CAAMC,GAAG,SAAT,gCAEA,wCACA,uBAAMC,SAAUd,EAAhB,UACE,gCACE,uBAAOe,QAAQ,WAAf,uBACA,uBACEC,YAAY,WACZL,KAAK,WACLM,KAAK,WACLC,GAAG,WACHC,SAAUV,OAGd,gCACE,uBAAOM,QAAQ,QAAf,oBACA,uBACEC,YAAY,qBACZL,KAAK,QACLM,KAAK,QACLC,GAAG,QACHC,SAAUV,OAGd,gCACE,uBAAOM,QAAQ,MAAf,uBACA,uBACEC,YAAY,SACZL,KAAK,WACLM,KAAK,WACLC,GAAG,MACHC,SAAUV,OAGd,8BACE,wBAAQQ,KAAK,SAAb,2BAKT,EC/DcM,EARD,WACZ,OACE,8BACE,qDAGL,ECwCcC,MA5Cf,WA8BE,OACE,mCACE,6BACE,eAAC,IAAD,CAAMX,GAAG,IAAT,UACE,sBAAMY,KAAK,QADb,oBAMF,8BArCEnB,EAAKoB,WAEL,+BACE,6BACE,cAAC,IAAD,CAAMb,GAAG,IAAT,oBAEF,6BAEE,mBAAGc,KAAK,IAAIC,QAAS,kBAAMtB,EAAKuB,QAAX,EAArB,yBAQJ,+BACE,6BACE,cAAC,IAAD,CAAMhB,GAAG,UAAT,sBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,SAAT,4BAmBX,EC9BKiB,EAAWC,YAAe,CAC9BC,IAAK,aAGDC,EAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAC1B5D,EAAQM,aAAaC,QAAQ,YACnC,MAAO,CACLqD,QAAQ,2BACHA,GADE,IAELC,cAAe7D,EAAK,iBAAaA,GAAU,KAGhD,IAEK8D,EAAS,IAAIC,IAAa,CAC9BC,KAAMP,EAASQ,OAAOX,GACtBY,MAAO,IAAIC,MAqBEC,MAlBf,WACE,OACE,cAACC,EAAA,EAAD,CAAgBP,OAAQA,EAAxB,SACE,cAAC,IAAD,UACE,gCACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOQ,KAAK,IAAIC,QAAS,cAAC,EAAD,MACzB,cAAC,IAAD,CAAOD,KAAK,SAASC,QAAS,cAAC,EAAD,MAC9B,cAAC,IAAD,CAAOD,KAAK,UAAUC,QAAS,cAAC,EAAD,MAC/B,cAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,cAAC,EAAD,eAMpC,ECvCKC,EAAcC,QACW,cAA7B/D,OAAOC,SAAS+D,UAEe,UAA7BhE,OAAOC,SAAS+D,UAEhBhE,OAAOC,SAAS+D,SAASC,MACvB,2DAuCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1B1D,QAAQC,IACN,iHAKE8C,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlBpD,QAAQC,IAAI,sCAGR8C,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,IAIxB,EACF,CACF,IACAS,OAAM,SAACrE,GACNQ,QAAQR,MAAM,4CAA6CA,EAC5D,GACJ,CC7FDsE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDYnB,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAIzE,GADkB,IAAImB,IAAIC,GAAwBzF,OAAOC,SAASwC,MACpDiD,SAAW1F,OAAOC,SAASyF,OAIvC,OAGF1F,OAAO2F,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMsB,GAAN,sBAEP3B,IAgEV,SAAiCK,EAAOC,GAEtCwB,MAAMzB,EAAO,CACXjB,QAAS,CAAE,iBAAkB,YAE5BsB,MAAK,SAACqB,GAEL,IAAMC,EAAcD,EAAS3C,QAAQ6C,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAM1B,MAAK,SAACC,GAClCA,EAAa0B,aAAa3B,MAAK,WAC7BxE,OAAOC,SAASmG,QACjB,GACF,IAGDlC,EAAgBC,EAAOC,EAE1B,IACAc,OAAM,WACL7D,QAAQC,IACN,gEAEH,GACJ,CA1FO+E,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAM1B,MAAK,WACjCnD,QAAQC,IACN,4GAGH,KAGD4C,EAAgBC,EAAOC,EAE1B,GACF,CACF,CCvCDE,E","file":"static/js/main.2b28d138.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction List() {\n  return (\n    <div>\n      <h1>Hello world!</h1>\n    </div>\n  );\n}\n\nexport default List;\n","import React from \"react\";\nimport List from \"../components/List\";\n\nconst Home = () => {\n  return (\n    <div>\n      <List />\n    </div>\n  );\n};\n\nexport default Home;\n","import { gql } from \"@apollo/client\";\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($userName: String!, $email: String!, $password: String!) {\n    addUser(userName: $userName, email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useState } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { Link } from \"react-router-dom\";\nimport { LOGIN } from \"../utils/mutations\";\nimport Auth from \"../utils/auth\";\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: \"\", password: \"\" });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div>\n      <Link to=\"/signup\">Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div>\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p>The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div>\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useMutation } from \"@apollo/client\";\nimport Auth from \"../utils/auth\";\nimport { ADD_USER } from \"../utils/mutations\";\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: \"\", password: \"\" });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        userName: formState.userName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div>\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div>\n          <label htmlFor=\"userName\">userName:</label>\n          <input\n            placeholder=\"userName\"\n            name=\"userName\"\n            type=\"userName\"\n            id=\"userName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div>\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\n\nconst Error = () => {\n  return (\n    <div>\n      <h1>Error finding page</h1>\n    </div>\n  );\n};\n\nexport default Error;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul>\n          <li>\n            <Link to=\"/signup\">Signup</Link>\n          </li>\n          <li>\n            <Link to=\"/login\">Login</Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header>\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\"></span>\n          Music Mingle\n        </Link>\n      </h1>\n\n      <nav>{showNavigation()}</nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\n\nimport Home from \"./pages/Home\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Error from \"./pages/Error\";\nimport Nav from \"./components/Nav\";\n\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"id_token\");\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <Nav />\n          <Routes>\n            <Route path=\"/\" element={<Home />} />\n            <Route path=\"/login\" element={<Login />} />\n            <Route path=\"/signup\" element={<Signup />} />\n            <Route path=\"*\" element={<Error />} />\n          </Routes>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}